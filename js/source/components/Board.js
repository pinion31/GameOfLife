import React from 'react';
import ReactDOM from 'react-dom';
import {Component, PropTypes} from 'react';
import Cell from "./Cell";
import BoardStore from "../store/BoardStore";
import {store} from "../store/BoardStore";
import {initBoard, clearBoard} from '../actions/actionCreators';
import {Grid, Row, Col, Clearfix, Navbar, Nav, NavItem} from 'react-bootstrap';

class Board extends Component {

  constructor(props) {
    super(props);

    this.state = {
      board:store.getState().board,
      start:null,
    };

   // store.subscribe(this.updateBoardUI.bind(this));

  }


 //event generated by pushing start
  /*start(shouldStartGame) {
    console.log("even clicked")
    return shouldStartGame? setInterval(1000, this.updateBoard): clearInterval();
  }*/

  updateBoard() {

   // store.dispatch("UPDATE_BOARD");
    store.dispatch(initBoard(25,25));

    let newBoard = store.getState().board;
    //console.log("new Board = " + newBoard);

    this.setState({
      board:newBoard,
    });

    //console.log("testing board update");
  }

  refreshCell(cellState) {
    this.setState ({
      status: cellState,
    });

  }
 // refresh={this.refreshCell(state[i][n].status)}
//generate matrix of cells with rows and columns
  _generateBoard(state, numOfRows, numOfColumns) {
    //console.log("regenerating board");
    let i;
    let rows =[];

    for (i=0;i < numOfRows;i++) {
      let columns = () => {
        let n;
        let col= [];

        for (n=0;n < numOfColumns;n++) {
          //console.log("cellstatus =" + state[i][n].status);
          col.push(<Cell key={i + "" + n} status={state[i][n].status} row= {i} column= {n}></Cell>);
        }
          return col;
      };

      rows.push(
        <div className="row" key={i}>
          { columns()}
        </div>
      );

    }
    return rows;
  }

  test() {
    console.log('test');

  }
  updateBoardUI() {
    let newBoard = store.getState().board;

    this.setState({
      board: newBoard,
    });

   console.log("updating the board with " + newBoard );
  }
//returns count of surrounding cells given a cell coordinate
  _countNeighbors(boardState, cell) {
   //ex cell = {row:1,col:2}

  let count = 0;

  let clockWiseCellOffset = [[-1,1], [0,1], [1,1], [1,0], [1,-1],
  [0,-1], [-1,-1], [-1,0]];

  let cellsToCheck =  clockWiseCellOffset.map(function(cellOffset){
    cellOffset[0] += cell.row;
    cellOffset[1] += cell.column;
  });

  cellsToCheck.map((cellNum) => {
    if (boardState[cellNum[0]] [cellNum[1]] === 1) {
    count += 1;
    }
  });

  return count;
}  /*<NavItem onClick={this.start(true)}>Run</NavItem>*/

  startBoard(shouldStart) {
    if (shouldStart) {
      this.state.start = setInterval(this.updateBoard.bind(this),1000);
    }
    else {
      clearInterval(this.state.start);
    }
  }

  render() {
    //let newState = store.getState().board;
    return (<div>
      <Grid>
      <Row className="show-grid">
          <Col xs={12} md={12}>
           <Navbar inverse className="top-banner action-button">
             <Navbar.Header className="header">
               <Navbar.Brand className="brand nav-align">
               Game Of Life
               </Navbar.Brand>
             </Navbar.Header>
             <Nav className="nav-align">

              <NavItem onClick={(e) => {e.preventDefault(); this.startBoard(true)}}>Run</NavItem>
              <NavItem onClick={(e) => {e.preventDefault(); this.startBoard(false)}}>Pause</NavItem>
              <NavItem onClick={(e) => {e.preventDefault(); store.dispatch().call(this, clearBoard(store.getState()))}}>Clear</NavItem>
             </Nav>
           </Navbar>
           </Col>
      </Row>
      <Row className="show-grid board-holder">
        <Col xs={8} md={8}> <div className="board">
      {this._generateBoard(store.getState().board,this.state.board.length,this.state.board.length)}
      </div>
      </Col>
      </Row>
    </Grid>
    </div>
    /*
      <div className="board">
      {this._generateBoard(this.state.board,this.state.board.length,this.state.board.length)}
      </div>*/
    );
  }
}

/*
export const start = (shouldStartGame) => {
  {shouldStartGame? setInterval(1000, this.updateBoard): clearInterval()};
}*/
export default Board